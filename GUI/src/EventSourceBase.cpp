#include<cstdlib>
#include <iostream>

#include "EventSourceBase.h"
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
EventSourceBase::EventSourceBase() {

  nEvents = 0;
}
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
EventSourceBase::~EventSourceBase() { }
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
void EventSourceBase::loadGeometry(const std::string & fileName){
  
  myGeometryPtr = std::make_shared<GeometryTPC>(fileName.c_str());
}
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
void EventSourceBase::loadEventId(unsigned int iEvent){

  int iEntry = 0;
  while(currentEventNumber()!=iEvent){  
    loadFileEntry(iEntry);
    ++iEntry;
  }
}
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
std::shared_ptr<EventTPC> EventSourceBase::getCurrentEvent() const{

  return myCurrentEvent;
}
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
std::shared_ptr<EventTPC> EventSourceBase::getNextEvent(){

  if(myCurrentEntry<nEvents){
    loadFileEntry(++myCurrentEntry);
  }

  return myCurrentEvent;
}
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
std::shared_ptr<EventTPC> EventSourceBase::getPreviousEvent(){

  if(myCurrentEntry>0){
    loadFileEntry(--myCurrentEntry);
  }

  return myCurrentEvent;
}
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
std::shared_ptr<GeometryTPC> EventSourceBase::getGeometry() const{ return myGeometryPtr; }
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
unsigned int EventSourceBase::numberOfEvents() const{ return nEvents; }
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
unsigned int EventSourceBase::currentEventNumber() const{

  if(myCurrentEvent){
    return myCurrentEvent->GetEventId();
  }
  return 0;
}
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
